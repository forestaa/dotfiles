[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]] # toml
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]] # go
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
	let g:go_metalinter_autosave = 1
'''

[[plugins]] # deoplete
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
		inoremap <silent><expr> <TAB>
		\ pumvisible() ? "\<C-n>" :
		\ <SID>check_back_space() ? "\<TAB>" :
		\ deoplete#mappings#manual_complete()
		function! s:check_back_space() abort "{{{
		let col = col('.') - 1
		return !col || getline('.')[col - 1]  =~ '\s'
    endfunction"}}}
'''

[[plugins]] # from deoplete's README
repo = 'roxma/nvim-yarp'
if = '!has("nvim")'
depends = ['deoplete.nvim']

[[plugins]] # from deoplete's README
repo = 'roxma/vim-hug-neovim-rpc'
if = '!has("nvim")'
depends = ['deoplete.nvim']

[[plugins]] # ruby
repo = 'Shougo/deoplete-rct'
on_ft = ['ruby']
depends = ['deoplete.nvim']

[[plugins]] # linter server
repo = 'w0rp/ale'
on_ft = ['ruby', 'haskell']
hook_add = '''
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 0
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1
  let g:ale_open_list = 1

  let g:ale_linters = {'haskell' : ['stack-ghc-mod', 'stack-ghc', 'hlint']}
'''

[[plugins]] # haskell
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']
hook_add = '''
  let g:haskellmode_completion_ghc = 0
'''

[[plugins]] # haskell
repo = 'eagletmt/neco-ghc'
on_ft = ['haskell']
on_i = 1
depends = ['deoplete.nvim']
hook_add = '''
  let g:necoghc_use_stack = 1
'''

[[plugins]] # haskell
repo = 'parsonsmatt/intero-neovim'
on_ft = ['haskell']
hook_add = '''
  let g:intero_use_neomake = 0

  nnoremap [intero] <Nop>
  nmap <Space>h [intero]

  nmap <silent> [intero]t <Plug>InteroGenericType<CR>

  autocmd MyAutoCmd BufWritePost *.hs call s:intero_load_wrapper()
  function! s:intero_load_wrapper() abort
    if g:intero_stack_yaml == $HOME . '/.stack/global-project/stack.yaml'
      InteroLoadCurrentFile
    else
      InteroReload
    endif
  endfunction
'''

[[plugins]] # SATySFi
repo = 'qnighy/satysfi.vim'
on_ft = ['satysfi']
hook_add = '''
  augroup SATySFiCmd
    autocmd!
    autocmd BufWritePost *.saty :lcd %:h | execute ":!satysfi %:p > /dev/null 2>&1" | redraw!
  augroup END
'''
