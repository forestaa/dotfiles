[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]] # toml
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]] # go
repo = 'fatih/vim-go'
on_ft = ['go']
hook_add = '''
	let g:go_metalinter_autosave = 1
'''

[[plugins]] # deoplete
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_add = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#auto_complete_delay = 0
		inoremap <silent><expr> <TAB>
		\ pumvisible() ? "\<C-n>" :
		\ <SID>check_back_space() ? "\<TAB>" :
		\ deoplete#mappings#manual_complete()
		function! s:check_back_space() abort "{{{
		let col = col('.') - 1
		return !col || getline('.')[col - 1]  =~ '\s'
    endfunction"}}}
'''

[[plugins]] # from deoplete's README
repo = 'roxma/nvim-yarp'
if = '!has("nvim")'
depends = ['deoplete.nvim']

[[plugins]] # from deoplete's README
repo = 'roxma/vim-hug-neovim-rpc'
if = '!has("nvim")'
depends = ['deoplete.nvim']

[[plugins]] # ruby
repo = 'Shougo/deoplete-rct'
on_ft = ['ruby']
depends = ['deoplete.nvim']

[[plugins]] # linter server
repo = 'w0rp/ale'
on_ft = ['ruby', 'haskell', 'satysfi']
hook_add = '''
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 0
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 1
  let g:ale_open_list = 1

  let g:ale_linters = {
  \   'haskell' : ['stack-ghc-mod', 'stack-ghc', 'hlint']
  \ , 'satysfi' : ['satysfi']
  \ }
'''

[[plugins]] # haskell 
repo = 'neovimhaskell/haskell-vim'
on_ft = ['haskell']
hook_add = '''
  let g:haskellmode_completion_ghc = 0
'''

[[plugins]] # haskell
repo = 'eagletmt/neco-ghc'
on_ft = ['haskell']
depends = ['deoplete.nvim']
hook_add = '''
  let g:necoghc_use_stack = 1
'''

[[plugins]] # haskell
repo = 'parsonsmatt/intero-neovim'
on_ft = ['haskell']
hook_add = '''
  let g:intero_use_neomake = 0

  nnoremap [intero] <Nop>
  nmap <Space>h [intero]

  nmap <silent> [intero]t <Plug>InteroGenericType<CR>

  autocmd MyAutoCmd BufWritePost *.hs call s:intero_load_wrapper()
  function! s:intero_load_wrapper() abort
    if g:intero_stack_yaml == $HOME . '/.stack/global-project/stack.yaml'
      InteroLoadCurrentFile
    else
      InteroReload
    endif
  endfunction
'''

[[plugins]] # SATySFi
repo = 'qnighy/satysfi.vim'
on_ft = ['satysfi']
depends = ['ale']
hook_add = '''
  augroup SATySFiCmd
    autocmd!
    " autocmd BufWritePost *.saty :lcd %:h | execute ":!satysfi %:p > /dev/null 2>&1" | redraw!
  augroup END
'''
hook_post_source = '''
  function! GetExecutable(buffer) abort
    return 'satysfi'
  endfunction
 
  function! GetCommand(buffer) abort
      return ale#path#BufferCdString(a:buffer)
      \   .  ale#Escape(GetExecutable(a:buffer))
      \   .  ' %s'
  endfunction

  " Matchs patterns line the following:
  "
  " (no version)
  "   parsing 'math.saty' ...
  " ! [Syntax Error at Parser] at line 8, characters 4-5:
  "
  " ---- ---- ---- ----
  "   reading 'math.satyh' ...
  " ! [Type Error] at line 8, characters 0-4:
  "   undefined variable 'hoge'.
  "
  " ---- ---- ---- ----
  "   reading 'math.satyh' ...
  " ! [Type Error] at line 32, characters 52-70:
  "   this expression has type
  "     length,
  "   but is expected of type
  "     int.
  "
  " ---- ---- ---- ----
  "   reading 'math.satyh' ...
  " ! [Type Error] at line 3, character 0 to line 857, character 3:
  "     The implementation does not provide value 'concat', 
  "     which is required by the signature. 
  "
  "   evaluating texts ...
  " ! [Error] package file not found: dist/fonts/ipaexm.ttf
  " 
  "
  "
  " (version 0.0.2)
  "  parsing 'list.satyh' ...
  " ! [Syntax Error at Lexer] at "list.satyh", line 29, characters 7-8:
  "     illegal token '&' in a program area
  "
  "   parsing 'list.satyh' ...
  " ! [Syntax Error at Parser] at "", line 23, characters 0-4:
  "
  "  ---- ---- ---- ----
  "   reading 'math.satyh' ...
  " ! [Type Error] at "math.satyh", line 441, characters 4-8:
  "     undefined variable 'hoge'.
  " 
  " ---- ---- ---- ----
  "  reading 'list.satyh' ...
  " ! [Type Error] at "list.satyh", line 2, character 0 to line 135, character 5:
  "     The implementation of value 'mapi' has type
  "       (int -> 'a -> 'b) -> 'a list -> 'b list
  "     which is inconsistent with the type required by the signature
  "       (int -> '#a -> '#b) -> '#a list -> '#b list
  "
  "  ---- ---- ---- ----
  "   reading 'math.satyh' ...
  " ! [Type Error] at "math.satyh", line 994, characters 33-38:
  "     this expression has type
  "       length,
  "     but is expected of type
  "       float.
  "
  "   evaluating texts ...
  " ! [Error] package file not found:
  "       dist/fonts/ipaexg.ttf
  "     candidate directories for the SATySFi library root:
  "       /home/foresta/.satysfi
  "       /usr/local/share/satysfij
  "       /usr/share/satysfi
  function! HandleSATySFiFormat(buffer, lines) abort
    let l:line_pattern  = '---- ---- ---- ----'
    let l:ing_pattern   = '\v^\s*(reading|parsing|evaluating|breaking|embedding|writing)\s*(''(.*)'')?.*'
    let l:error_pattern = '\v^\s*!\s*(\[.*\])\s*%(at\s*%(\"(.*)\",)?\s*line\s*(\d+),\s*characters?\s*(\d+)%(-(\d+))?\s*%(to\s*line\s*(\d+),\s*character\s*(\d+))?:)?(.*)'
  
    " Group the lines into smaller lists.
    let l:corrected_lines = []
    for l:line in a:lines
        if len(matchlist(l:line, l:ing_pattern)) > 0
            call add(l:corrected_lines, [l:line])
        elseif match(l:line, l:line_pattern) > 0
            continue
        elseif len(l:corrected_lines) > 0
            call add(l:corrected_lines[-1], l:line)
        endif
    endfor
  
    " Format messages
    let l:output = []
    for l:line_list in l:corrected_lines
        let l:match_ing = matchlist(l:line_list[0], l:ing_pattern)
        if len(l:match_ing) <= 0 || len(line_list) <= 1
          continue
        endif

        let l:match_error = matchlist(l:line_list[1], l:error_pattern)
        if len(match_error) <= 0
          continue
        endif
  
        let l:filename = l:match_ing[3]
        let l:text = l:match_error[1] . ' ' . l:match_error[8]
        for l:line in l:line_list[2:]
            let l:text .= substitute(l:line, '\s*', ' ', '')
        endfor
       
        let l:item = {
        \   'filename': l:filename,
        \   'lnum': l:match_error[3] + 0,
        \   'col' : l:match_error[4] + 1,
        \   'text': l:text,
        \   'type': 'E'
        \}
  
        call add(l:output, l:item)
    endfor
  
    return l:output
  endfunction

  call ale#linter#Define('satysfi', {
  \   'name': 'satysfi',
  \   'executable_callback': 'GetExecutable',
  \   'command_callback': 'GetCommand',
  \   'callback': 'HandleSATySFiFormat',
  \})
'''


